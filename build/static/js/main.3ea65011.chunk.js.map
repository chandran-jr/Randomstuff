{"version":3,"sources":["features/cameraSlice.js","WebcamCapture.js","firebase.js","features/appSlice.js","Preview.js","Chat.js","Chats.js","ChatView.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["cameraSlice","createSlice","name","initialState","cameraImage","reducers","setCameraImage","state","action","payload","resetCameraImage","actions","selectCameraImage","camera","VideoConstraints","width","height","facingMode","WebcamCapture","WebcamRef","useRef","dispatch","useDispatch","history","useHistory","capture","useCallback","imageSrc","current","getScreenshot","push","className","audio","ref","screenshotFormat","videoConstraints","onClick","fontSize","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","storage","provider","GoogleAuthProvider","appSlice","user","selectedImage","login","logout","selectImage","resetImage","selectUser","app","selectSelectedImage","Preview","useSelector","useEffect","replace","src","alt","id","uuid","putString","on","error","console","log","child","getDownloadURL","then","url","collection","add","imageUrl","username","profilePic","read","timestamp","FieldValue","serverTimestamp","Chat","doc","set","merge","Avatar","date","Date","toDate","toUTCString","Chats","useState","posts","setPosts","orderBy","onSnapshot","snapshot","docs","map","data","signOut","type","placeholder","ChatView","exit","isPlaying","duration","strokeWidth","size","colors","remainingTime","Login","Button","variant","signInWithPopup","result","displayName","photoURL","uid","catch","alert","message","App","onAuthStateChanged","authUser","exact","path","store","configureStore","reducer","appReducer","cameraReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qXAEaA,EAAcC,YAAY,CACrCC,KAAO,SACPC,aAAe,CACbC,YAAc,QAGlBC,SAAU,CACRC,eAAiB,SAACC,EAAMC,GACtBD,EAAMH,YAAcI,EAAOC,SAG9BC,iBAAmB,SAACH,GAClBA,EAAMH,YAAc,SAKhB,EAA2CJ,EAAYW,QAAhDL,EAAP,EAAOA,eAAgBI,EAAvB,EAAuBA,iBAEjBE,EAAoB,SAACL,GAAD,OAAWA,EAAMM,OAAOT,aAE1CJ,IAAf,Q,uBCbMc,EAAmB,CACrBC,MAAO,IACPC,OAAQ,IACRC,WAAY,QA0CDC,MAvCf,WAEI,IAAMC,EAAYC,iBAAO,MACnBC,EAAWC,cACXC,EAAUC,cAEVC,EAAUC,uBAAY,WACpB,IAAMC,EAAWR,EAAUS,QAAQC,gBAEnCR,EAASf,EAAeqB,IACxBJ,EAAQO,KAAK,cAGnB,CAACT,EAASF,EAAUI,IAEtB,OACI,sBAAKQ,UAAU,gBAAf,UACI,cAAC,IAAD,CACIC,OAAS,EACThB,OAAUF,EAAiBE,OAC3BiB,IAAOd,EACPe,iBAAmB,aACnBnB,MAASD,EAAiBC,MAC1BoB,iBAAoBrB,IAK5B,cAAC,IAAD,CAEIiB,UAAU,wBACVK,QAASX,EACTY,SAAW,c,kLClCfC,EAFcC,IAASC,cATR,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,8CAKcC,YAEjBC,EAAOT,IAASS,OAEhBC,EAAUV,IAASU,UAEnBC,EAAW,IAAIX,IAASS,KAAKG,mBCjBxBC,G,MAAWnD,YAAY,CAClCC,KAAM,MACNC,aAAe,CACfkD,KAAK,KACLC,cAAc,MAGdjD,SAAU,CACRkD,MAAO,SAAChD,EAAOC,GACbD,EAAM8C,KAAO7C,EAAOC,SAEtB+C,OAAQ,SAACjD,GACPA,EAAM8C,KAAO,MAEfI,YAAa,SAAClD,EAAOC,GACnBD,EAAM+C,cAAgB9C,EAAOC,SAE/BiD,WAAY,SAACnD,GACXA,EAAM+C,cAAgB,UAMrB,EAAkDF,EAASzC,QAAnD4C,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAAQC,EAAvB,EAAuBA,YAEjBE,GAFN,EAAoCD,WAEjB,SAACnD,GAAD,OAAWA,EAAMqD,IAAIP,OAElCQ,GAAsB,SAACtD,GAAD,OAAWA,EAAMqD,IAAIN,eAEzCF,KAAf,QCiDeU,OA/Df,WAEI,IAAM1D,EAAc2D,YAAYnD,GAC1BW,EAAUC,cACVH,EAAYC,cACZ+B,EAAOU,YAAYJ,GAgCzB,OA9BAK,qBAAU,WACF5D,GACAmB,EAAQ0C,QAAQ,OAEtB,CAAC7D,EAAamB,IA2BZ,sBAAKQ,UAAU,UAAf,UACA,cAAC,IAAD,CACCA,UAAU,iBACVK,QA5BgB,WACjBf,EAASX,QA8BR,sBAAKqB,UAAU,wBAAf,UACA,cAAC,IAAD,IACG,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,OAGA,qBAAKmC,IAAK9D,EAAa+D,IAAI,KAC3B,sBAAK/B,QAtCI,WACb,IAAMgC,EAAKC,cACQpB,EAAQhB,IAAR,gBAAqBmC,IAAME,UAAUlE,EAAa,YAE1DmE,GAAG,gBAAiB,MAAO,SAACC,GACnCC,QAAQC,IAAIF,MACd,WACEvB,EAAQhB,IAAI,SAAS0C,MAAMP,GAAIQ,iBAAiBC,MAAK,SAACC,GAClDxC,EAAGyC,WAAW,SAASC,IAAI,CACvBC,SAAWH,EACXI,SAAW,cACXC,WAAa9B,EAAK8B,WAClBC,MAAO,EACPC,UAAY9C,IAASQ,UAAUuC,WAAWC,oBAE9ChE,EAAQ0C,QAAQ,iBAuBIlC,UAAU,kBAAlC,UACI,sCACA,cAAC,IAAD,CAAUM,SAAS,QAAQN,UAAU,6B,kFCtCtCyD,OA5Bf,YAAwE,IAAzDpB,EAAwD,EAAxDA,GAAIc,EAAoD,EAApDA,SAAUG,EAA0C,EAA1CA,UAAWJ,EAA+B,EAA/BA,SAAUG,EAAqB,EAArBA,KAAOD,EAAc,EAAdA,WAE9C9D,EAAWC,cACXC,EAAUC,cAajB,OACI,sBAAKY,QAZI,WACLgD,IACA/D,EAASoC,EAAYwB,IACrB3C,EAAGyC,WAAW,SAASU,IAAIrB,GAAIsB,IAAI,CAC/BN,MAAO,GACR,CAACO,OAAO,IAEXpE,EAAQO,KAAK,iBAKGC,UAAU,OAA9B,UACI,cAAC6D,GAAA,EAAD,CAAQ1B,IAAKiB,IACb,sBAAKpD,UAAU,aAAf,UACI,6BAAKmD,IACL,mCAAME,GAAQ,gBAAiB,cAAC,KAAD,CAAcS,KAAQ,IAAIC,KAAJ,OAAST,QAAT,IAASA,OAAT,EAASA,EAAWU,UAAUC,gBAAnF,WAEFZ,GAAQ,cAAC,KAAD,CAAUrD,UAAU,uBCmC3BkE,OAxDf,WAEI,MAAyBC,mBAAS,IAAlC,oBAAOC,EAAP,KAAaC,EAAb,KACM/C,EAAOU,YAAYJ,GACnBtC,EAAWC,cACXC,EAAUC,cAiBhB,OAfAwC,qBAAU,WACN1B,EAAGyC,WAAW,SAASsB,QAAQ,YAAa,QAAQC,YAChD,SAACC,GAAD,OACIH,EAASG,EAASC,KAAKC,KAAI,SAAChB,GAAD,MAAU,CACjCrB,GAAGqB,EAAIrB,GACPsC,KAAMjB,EAAIiB,iBAGxB,IAQE,sBAAK3E,UAAU,QAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,cAAC6D,GAAA,EAAD,CAAQ1B,IAAKb,EAAK8B,WAAY/C,QAAS,kBAAMY,EAAK2D,WAAW5E,UAAU,kBACvE,sBAAKA,UAAU,mBAAf,UACI,cAAC,KAAD,CAAYA,UAAU,sBACtB,uBAAO6E,KAAK,OAAOC,YAAY,iBAGvC,qBAAK9E,UAAU,eAAf,SACKoE,EAAMM,KAAI,gBAAErC,EAAF,EAAEA,GAAF,IACXsC,KAAMvB,EADK,EACLA,WAAWD,EADN,EACMA,SAASG,EADf,EACeA,UAAUJ,EADzB,EACyBA,SAASG,EADlC,EACkCA,KADlC,OAGP,cAAC,GAAD,CACMhB,GAAIA,EACJc,SAAUA,EACVG,UAAWA,EACXJ,SAAUA,EACVG,KAAMA,EACND,WAAYA,GANPf,QAYnB,cAAC,IAAD,CACIrC,UAAU,iBACVK,QAhCK,WACbf,EAASX,KACTa,EAAQ0C,QAAQ,MA+BR5B,SAAU,c,iBCXXyE,OA5Cf,WAEI,IAAMxD,EAAgBS,YAAYF,IAC5BtC,EAAUC,cAEhBwC,qBAAU,WACFV,GACAyD,OAIR,IAAMA,EAAO,WACTxF,EAAQ0C,QAAQ,WAGpB,OACI,sBAAKlC,UAAU,WAAf,UACI,qBAAKmC,IAAKZ,EAAelB,QAAS2E,EAAM5C,IAAI,KAE5C,qBAAKpC,UAAU,kBAAf,SACA,cAAC,wBAAD,CACAiF,WAAS,EACTC,SAAU,GACVC,YAAa,EACbC,KAAM,GACNC,OAAQ,CACR,CAAC,UAAW,KACZ,CAAC,UAAW,KACZ,CAAC,UAAU,MARX,SAWK,YAAsB,IAApBC,EAAmB,EAAnBA,cAIC,OAHqB,IAAlBA,GACCN,IAEGM,W,gBCNZC,OA7Bf,WAEI,IAAMjG,EAAWC,cAcjB,OACI,qBAAKS,UAAU,QAAf,SAEA,sBAAKA,UAAU,mBAAf,UACA,wCACA,qBAAKmC,IAAI,sGAAsGC,IAAI,KACnH,cAACoD,GAAA,EAAD,CAAQC,QAAQ,WAAWpF,QAjBhB,WACXY,EAAKyE,gBAAgBvE,GACpB2B,MAAK,SAAC6C,GACHrG,EAASkC,EAAM,CACX2B,SAAUwC,EAAOrE,KAAKsE,YACtBxC,WAAauC,EAAOrE,KAAKuE,SACzBxD,GAAIsD,EAAOrE,KAAKwE,UAErBC,OAAM,SAACtD,GAAWuD,MAAMvD,EAAMwD,aASjC,2BCoCOC,OAjDf,WAEE,IAAM5E,EAAOU,YAAYJ,GACnBtC,EAAWC,cAiBjB,OAfA0C,qBAAU,WACRhB,EAAKkF,oBAAmB,SAACC,GAErB9G,EADE8G,EACO5E,EAAM,CACb2B,SAAUiD,EAASjD,SACnBC,WAAagD,EAASP,SACtBxD,GAAK+D,EAASN,MAIPrE,WAMb,qBAAKzB,UAAU,MAAf,SACJ,cAAC,IAAD,UACMsB,EACF,qBAAKtB,UAAU,YAAf,SACE,qBAAKA,UAAU,cAAf,SACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOqG,OAAK,EAACC,KAAK,IAAlB,SACA,cAAC,EAAD,MAEA,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SAAlB,SACA,cAAC,GAAD,MAEA,cAAC,IAAD,CAAOA,KAAK,cAAZ,SACA,cAAC,GAAD,MAEA,cAAC,IAAD,CAAOA,KAAK,WAAZ,SACA,cAAC,GAAD,aAdI,cAAC,GAAD,SCnCDC,GAAQC,YAAe,CAClCC,QAAS,CACP5E,IAAK6E,GACL5H,OAAQ6H,KCKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUZ,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJa,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1E,MAAK,SAAC2E,GAClCA,EAAaC,kB","file":"static/js/main.3ea65011.chunk.js","sourcesContent":["import {createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const cameraSlice = createSlice({\r\n  name : 'camera',\r\n  initialState : {\r\n    cameraImage : 'null'\r\n  },\r\n\r\nreducers: {\r\n  setCameraImage : (state,action) => {\r\n    state.cameraImage = action.payload;\r\n  },\r\n\r\n resetCameraImage : (state) => {\r\n   state.cameraImage = null\r\n },\r\n},\r\n});\r\n\r\nexport const {setCameraImage, resetCameraImage} = cameraSlice.actions;\r\n\r\nexport const selectCameraImage = (state) => state.camera.cameraImage;\r\n\r\nexport default cameraSlice.reducer;\r\n\r\n","import React, { useCallback, useRef} from 'react';\r\nimport Webcam from 'react-webcam';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport {  useDispatch } from 'react-redux';\r\nimport { setCameraImage } from './features/cameraSlice';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './webcamCapture.css';\r\n\r\n\r\n\r\nconst VideoConstraints = {\r\n    width: 250,\r\n    height: 400,\r\n    facingMode: 'user',\r\n};\r\n\r\nfunction WebcamCapture() {\r\n\r\n    const WebcamRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const capture = useCallback(() => {\r\n            const imageSrc = WebcamRef.current.getScreenshot();\r\n\r\n            dispatch(setCameraImage(imageSrc));\r\n            history.push(\"/preview\")\r\n            \r\n\r\n    },[dispatch,WebcamRef,history])\r\n\r\n    return (\r\n        <div className=\"webcamCapture\">\r\n            <Webcam\r\n                audio = {false}\r\n                height = {VideoConstraints.height}\r\n                ref = {WebcamRef}\r\n                screenshotFormat = \"image/jpeg\"\r\n                width = {VideoConstraints.width}\r\n                videoConstraints = {VideoConstraints}\r\n\r\n            />\r\n\r\n\r\n        <RadioButtonUncheckedIcon\r\n\r\n            className=\"webcamCapture__button\"\r\n            onClick={capture}\r\n            fontSize = \"large\"\r\n        />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WebcamCapture\r\n","import firebase from 'firebase';\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyA3aafoOMA22_8l9si_utqzAH9cY6K0iPA\",\r\n    authDomain: \"snappy-2152b.firebaseapp.com\",\r\n    projectId: \"snappy-2152b\",\r\n    storageBucket: \"snappy-2152b.appspot.com\",\r\n    messagingSenderId: \"219406518478\",\r\n    appId: \"1:219406518478:web:7945acb73c5c8f2aa5e89f\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\n  const db = firebaseApp.firestore();\r\n\r\n  const auth = firebase.auth();\r\n\r\n  const storage = firebase.storage();\r\n\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  export {db, auth, storage, provider};","import {createSlice } from '@reduxjs/toolkit';\n\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState : {\n  user:null,\n  selectedImage:null\n},\n\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n    selectImage: (state, action) => {\n      state.selectedImage = action.payload\n    },\n    resetImage: (state) => {\n      state.selectedImage = null\n    }\n  },\n\n});\n\nexport const { login, logout, selectImage, resetImage} = appSlice.actions;\n\nexport const selectUser = (state) => state.app.user;\n\nexport const selectSelectedImage = (state) => state.app.selectedImage;\n\nexport default appSlice.reducer;\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { resetCameraImage, selectCameraImage } from './features/cameraSlice';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport NoteIcon from '@material-ui/icons/Note';\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport CropIcon from '@material-ui/icons/Crop';\r\nimport TimerIcon from '@material-ui/icons/Timer';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {v4 as uuid} from 'uuid';\r\nimport {db , storage} from './firebase';\r\nimport firebase from 'firebase';\r\nimport './preview.css';\r\nimport { selectUser } from './features/appSlice';\r\n\r\nfunction Preview() {\r\n\r\n    const cameraImage = useSelector(selectCameraImage);\r\n    const history = useHistory();\r\n    const dispatch  = useDispatch();\r\n    const user = useSelector(selectUser);\r\n\r\n    useEffect(() => {\r\n        if(!cameraImage) {\r\n            history.replace(\"/\");\r\n        }\r\n    },[cameraImage, history]);\r\n\r\n    const closePreview = () => {\r\n        dispatch(resetCameraImage());\r\n    }\r\n\r\n    const sendPost = () => {\r\n        const id = uuid();\r\n        const uploadTask = storage.ref(`posts/${id}`).putString(cameraImage, 'data_url');\r\n\r\n        uploadTask.on('state_changed', null , (error) => {\r\n            console.log(error);\r\n        },() => {\r\n            storage.ref('posts').child(id).getDownloadURL().then((url) => {\r\n                db.collection('posts').add({\r\n                    imageUrl : url,\r\n                    username : \"Snappy User\",\r\n                    profilePic : user.profilePic,\r\n                    read : false,\r\n                    timestamp : firebase.firestore.FieldValue.serverTimestamp(),\r\n                });\r\n                history.replace(\"/chats\");\r\n            })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"preview\">\r\n        <CloseIcon\r\n         className=\"preview__close\"\r\n         onClick={closePreview}    \r\n         />\r\n\r\n         <div className=\"preview__toolbarRight\">   \r\n         <TextFieldsIcon/>\r\n            <CreateIcon/>\r\n            <NoteIcon/>\r\n            <MusicNoteIcon/>\r\n            <AttachFileIcon/>\r\n            <CropIcon/>\r\n            <TimerIcon/>\r\n         </div>\r\n\r\n            <img src={cameraImage} alt=\"\"/>\r\n            <div onClick={sendPost} className=\"preview__footer\">\r\n                <h2>Send</h2>\r\n                <SendIcon fontSize=\"small\" className=\"preview__sendIcon\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preview\r\n","import { Avatar } from '@material-ui/core';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nimport React from 'react';\r\nimport ReactTimeago from 'react-timeago';\r\nimport './Chat.css';\r\nimport {db} from './firebase';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useHistory} from 'react-router-dom';\r\nimport { selectImage } from './features/appSlice';\r\n\r\nfunction Chat({id, username, timestamp, imageUrl, read,  profilePic,}) {\r\n\r\n     const dispatch = useDispatch();\r\n     const history = useHistory();\r\n\r\n    const open = () => {\r\n        if(!read) {\r\n            dispatch(selectImage(imageUrl));\r\n            db.collection('posts').doc(id).set({\r\n                read : true\r\n            }, {merge: true});\r\n\r\n            history.push('/chats/view');\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div onClick={open} className=\"chat\">\r\n            <Avatar src={profilePic} />\r\n            <div className=\"chat__info\">\r\n                <h4>{username}</h4>\r\n                <p> {!read && 'Tap to view ~' }<ReactTimeago date = {new Date(timestamp?.toDate()).toUTCString()} /> </p>\r\n            </div>\r\n            {!read && <StopIcon className=\"chat__stopicon\"/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import { Avatar } from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport React, { useEffect, useState } from 'react';\r\nimport {auth, db} from './firebase';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './Chats.css';\r\nimport Chat from './Chat';\r\nimport { selectUser } from './features/appSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { resetCameraImage } from './features/cameraSlice';\r\n\r\nfunction Chats() {\r\n\r\n    const [posts,setPosts] = useState([]);\r\n    const user = useSelector(selectUser);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        db.collection('posts').orderBy('timestamp', 'desc').onSnapshot(\r\n            (snapshot) => \r\n                setPosts(snapshot.docs.map((doc) => ({\r\n                    id:doc.id,\r\n                    data: doc.data()\r\n                })\r\n        )))\r\n    },[])\r\n\r\n    const takeSnap = () => {\r\n        dispatch(resetCameraImage());\r\n        history.replace(\"/\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"chats\">\r\n            <div className=\"chats__header\">\r\n                <Avatar src={user.profilePic} onClick={() => auth.signOut()} className=\"chats__avatar\"/>\r\n                <div className=\"chats__searchbar\">\r\n                    <SearchIcon className=\"chats__searchIcon\" />\r\n                    <input type=\"text\" placeholder=\"Search\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"chats__posts\">\r\n                {posts.map(({id, \r\n                data:{profilePic,username,timestamp,imageUrl,read}}) => (\r\n\r\n                    <Chat key={id}\r\n                          id={id}\r\n                          username={username}\r\n                          timestamp={timestamp}\r\n                          imageUrl={imageUrl}\r\n                          read={read}\r\n                          profilePic={profilePic}\r\n                          />\r\n                )\r\n\r\n                )}\r\n            </div>\r\n            <RadioButtonUncheckedIcon \r\n                className=\"chats__takePic\"\r\n                onClick={takeSnap}\r\n                fontSize= \"large\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chats\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport {useHistory} from 'react-router-dom';\r\nimport './chatview.css';\r\nimport { selectSelectedImage } from './features/appSlice';\r\nimport {CountdownCircleTimer} from 'react-countdown-circle-timer';\r\n\r\nfunction ChatView() {\r\n\r\n    const selectedImage = useSelector(selectSelectedImage);\r\n    const history = useHistory();\r\n\r\n    useEffect(() =>{\r\n        if(!selectedImage){\r\n            exit();\r\n        }\r\n    })\r\n\r\n    const exit = () => {\r\n        history.replace('/chats');\r\n    }\r\n\r\n    return (\r\n        <div className=\"chatview\">\r\n            <img src={selectedImage} onClick={exit} alt=\"\" />\r\n\r\n            <div className=\"chatview__timer\">\r\n            <CountdownCircleTimer\r\n            isPlaying\r\n            duration={10} \r\n            strokeWidth={6}\r\n            size={50}\r\n            colors={[\r\n            [\"#004777\", 0.33],\r\n            [\"#F7B801\", 0.33],\r\n            [\"#A30000\",0.33]\r\n            ]}\r\n             >\r\n                {({remainingTime}) => {\r\n                    if(remainingTime === 0){\r\n                        exit();\r\n                    }\r\n                    return remainingTime\r\n                }}\r\n            </CountdownCircleTimer>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatView\r\n","import { Button } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { login } from './features/appSlice';\r\nimport { auth, provider } from './firebase';\r\nimport './Login.css';\r\n\r\nfunction Login() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider)\r\n        .then((result) => {\r\n            dispatch(login({\r\n                username: result.user.displayName,\r\n                profilePic : result.user.photoURL,\r\n                id: result.user.uid,\r\n            }))\r\n        }).catch((error) => {alert(error.message)})\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n\r\n        <div className=\"login__container\">\r\n        <h2>Snappy</h2>\r\n        <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSlLapujKfVQ8gZsoPZBLVK2sxuCampXG9VtQ&usqp=CAU\" alt=\"\" />\r\n        <Button variant=\"outlined\" onClick={signIn}>Sign In</Button>\r\n        \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport WebcamCapture from './WebcamCapture';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Preview from './Preview';\nimport Chats from './Chats';\nimport ChatView from './ChatView';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, logout, selectUser } from './features/appSlice';\nimport Login from './Login';\nimport { auth } from './firebase';\n\nfunction App() {\n\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        dispatch(login({\n          username: authUser.username,\n          profilePic : authUser.photoURL,\n          id : authUser.uid,\n        }))\n      }\n      else {\n        dispatch(logout())\n      }\n    })\n  })\n\n  return (\n    <div className=\"app\">\n<Router>\n    {!user ? (<Login/>) : \n    <div className=\"app__body\">\n      <div className=\"app__bodybg\">\n      <Switch>\n          <Route exact path=\"/\">\n          <WebcamCapture/>\n          </Route>\n          <Route exact path=\"/chats\">\n          <Chats/>\n          </Route>\n          <Route path=\"/chats/view\">\n          <ChatView/>\n          </Route>\n          <Route path=\"/preview\">\n          <Preview/>\n          </Route>\n        </Switch>\n      </div>\n      </div> \n      }\n    </Router>\n    </div>\n      \n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport appReducer from '../features/appSlice';\nimport cameraReducer from '../features/cameraSlice';\n\nexport const store = configureStore({\n  reducer: {\n    app: appReducer,\n    camera: cameraReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}